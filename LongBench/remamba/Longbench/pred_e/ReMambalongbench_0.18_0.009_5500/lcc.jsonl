{"pred": "            primerak.setPrimerak(new Primerak(primerak.getOdeljenje(), raspodelaTable.getModel().getValueAt(raspodelaTable.getSelectedRow(), 0).toString()));\n            primerak.setPrimerak(new Prim", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": "                return (ISearchCondition<String>)SubCriteria[\"GroupID\"];\n              }\n              return new StringSearchCondition<String>(\"GroupID\");\n            } \n        }\n        [EntityFieldDatabaseMappingAttribute(TableName=\"WorkQueue\", ColumnName=\"WorkQueueType\")]\n        public IS", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": "\t}\n}", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": "    char_class = p.Class(class_name)\n        for c in class_contents:\n            char_class.add(c)\n        yield char_class\nNext line of code:\n    source.put(char_class)\n        for c in class_contents:\n", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": "print(total)\n\nOutput:\n0.985\n\n", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": "    }\n    public void testNotInNullableCoercionCoercion()\n    {\n        String stmtText = \"select not longBoxed from \" + SupportBean.class.getName() + \"(string='A') as s0 \" +\n                          \"where longBoxed not in", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": "item.setExpanded(true);\n            }\n        }\n    }\n}", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": "    }\n}", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": "float w2 = w / scale;\nfloat h2 = h / scale;\nfloat w3 = w2 * constrainAspect;\nfloat h3 = h2 * constrainAspect;\nfloat w4 = w3 * constrainAspect;\nfloat h4 = h3 * constrainAspect", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": "        self.__repeat[0] = delay\n        \n        if interval is not None and self.__repeat[1] is None:\nNext line of code:\n        self.__repeat[1] = interval\n        \n        self.__repeat = (delay, interval)\n        \n        return True\n", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": "    logger.critical = logged_critical\n    logger.info = wptlogging.LoggedAboveLevelHandler(\"INFO\")\n    logger.warning = wptlogging.LoggedAboveLevelHandler(\"WARNING\")\n    logger.debug = wptlogging.LoggedAboveLevelHandler(\"DEBUG\")\n    ", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": "    def handle_timer(self, state_change):\n        if self.getState() == 'running':\n            self.log.info('Timer started')\n            self.timer.start(self._measurement_timing)\n            self.sig_handle_timer.connect(self", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": "        List<String> supportedStatusSet = new LinkedList<String>(supportedStatusSet1);\n        supportedStatusSet.removeAll(supportedStatusNames);\n        //now verify that the supported status set contains all the required\n        //presence status instances.\n        assertTrue(supportedStatusSet.", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": "                            await cmd.Start();\n                        }\n                    });\n                }\n                pickedMaps.Sort();\n                var pollOptions = new List<PollOption>();\n                for (int i = 0; i < pickedMaps.Count; i++)\n                {\n                    poll", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": "this.groupShowDemographics.SuspendLayout();\nthis.groupHL7Comm.SuspendLayout();\nthis.groupDelimeters.SuspendLayout();\nthis.groupShowAppts.SuspendLayout();\nthis.groupShowOut.SuspendLayout();\nthis", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": "Next line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": "    if self.param_type == 'ethernetPort':\n        self.param_type = '40ge'\n\nOutput:\n{\n    \"40GE\": {\n        \"Current IPv4 state\": \"down\",\n        \"Current IPv6 state\": \"down\",\n        \"Current", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": "  if (s.matches(\"[0-9]+\")) return true;\n    else return false;\n  }\n}", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": "m.Account.Username );\n\t\t\t}\n\t\t\tcatch {}\n\t\t}\n\t\t/// <summary>\n\t\t/// Records a staff member changing the item's owner\n\t\t/// </summary>\n\t\t/// <param name=\"auction\">The auction item</param>\n\t\t/// <param name=\"m", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": "                            if (colpseHubs &&!force_kill_path) {\n                                sead_partnn_l = findHub(nodemap, c_sead, true);\n                            }\n                            if (sead_partnn_l!= null) {\n", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": "\nprotected override void Dispose(bool disposing)\n{\n    if (disposing && (components!= null))\n    {\n        components.Dispose();\n    }\n    base.Dispose(disposing);\n}", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": "    with open(InFileNames.behaviorjson, 'w') as f:\n        json.dump(observations, f, indent=4, sort_keys=True)\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": "\nclass StatisticsPage(BasePage):\n    def __init__(self, report, title, step):\n        BasePage.__init__(self, report, title, step)\n        self.report = report\n        self.title = title\n        self.step = step\n        self.report.", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": "    if m < max_relalt_mm:\n        self.progress(\"Waiting for vehicle to be on the ground...\")\n        self.set_rc(8, 1000)\n        self.set_rc(3, 1700, timeout=10)\n        self.progress(\"Wait", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": "Next line of code: if (strings[0] == \"GlobalSettings\")\nNext line of code: {\nNext line of code: {\nNext line of code: {\nNext line of code: {\nNext line of code: {\nNext line of code: {\nNext line of code:", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": "buf = new byte[byteCount];\nbuf = new byte[byteCount];\nbuf = new byte[byteCount];\nbuf = new byte[byteCount];\nbuf = new byte[byteCount];\nbuf = new byte[byteCount];\nbuf = new byte[byteCount];\nbuf", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": "    }\n    private IEditorInput getEditorInput()\n    {\n        return input;\n    }\n    private IViewPart getViewPart()\n    {\n        return this;\n    }\n    private IMemento getMemento()\n    {\n        return opiRuntime", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": "        if (launcher!= null) {\n            launcher.show(e.getComponent(), e.getX(), e.getY());\n        }\n    }\n}", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": "    def test_clean_name_two_word_surnames(self):\n        name = parse_tables.clean_name(\"D`SOUZA\")\n        assert name == \"D'Souza\"\n    def test_clean_name_two_word_surnames", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": "            if sort_type == 'displayname':\n                sort_order = SortOrder.ascending\n            elif sort_type == 'uploadDate':\n                sort_order = SortOrder.descending\n            else:\n                raise ValueError('Invalid sort type: {}'.format(sort_type", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": "                index = list.IndexOf(list.objects[list.IndexOf(list.objects[index])]);\n            }\n            public bool MoveNext()\n            {\n                if (index < list.Count - 1)\n                {\n                    index++;\n                    return true;\n                }", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": "    path = os.path.join(parentpath, '.')\n    path = os.path.join(path, '.')\n    path = os.path.join(path, '.')\n    path = os.path.join(path, '.')\n    path =", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": "    return super(StructuredLogger, self).makeRecord(name, level, fn, lno, msg, args, exc_info, sinfo=sinfo)\n\nThe code above is a custom logging class that extends the logging module. It overrides the makeRecord method to add extra structured data", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": "                    }\n                    else\n                    {\n                        m.SendMessage(\"You have reached the skill cap for that skill\");\n                    }\n                    }\n                    else\n                    {\n                        m.SendMessage(\"You need 20 mana to use this item at your skill level.\");\n                    }\n                }", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": "    for field in model._meta.fields:\n        extra_attrs[field] = getattr(model, field)\n    for field, val in hash_.items():\n        if field in extra_attrs:\n            extra_attrs[field] = val\n    for field, val in extra", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": "    def __lastupdated__(self, req, __lastupdated__):\n        \"\"\"Handle the last updated request\"\"\"\n        if not __lastupdated__:\n            return page_not_authorized(req=req, referer=referer,\n                                       text=__lastupdated__ + '", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": "\n- name: ansible_ssh_user\n  description: User name with which to login to the remote server, normally set by the remote_user keyword.\n  env:\n    - name: ANSIBLE_SSH_USER\n  ini:\n    - section: defaults\n      key", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": "\t}\n\tprivate String encodeNASMessageCodes(String data)\n\t{\n\t\tif(data.length() == 0)\n\t\t\treturn data;\n\t\t\t\nNext line of code:\n\t}\n\tprivate String encodeNASMessageCodes(String data)\n\t{\n\t\t", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": "        record_add_field(rec, '200', subfields=[('c', page_count)])\n        if publisher:\n            record_add_field(rec, '200', subfields=[('a', publisher)])\n        if collection:\n            record_add_field(rec", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": "            assertEquals(A.getQuick(r, c), B.getQuick(c, r));\n            }\n        }\n    }\n    public void testViewColumnFlip2() {\n        IntMatrix2D B = A.viewColumnFlip(NCOLUMNS / 2);", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": "    PacketField(\"commandSpecificData\", ENIPSendUnitData,\n    ENIPSendUnitData),\n    PacketField(\"commandSpecificData\", ENIPSendUnitData,\n    ENIPSendUnitData),\n    PacketField(\"commandSpecificData\", ENIPSendUnitData,\n    ENIP", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": "reader.setProperty(AbstractGridFormat.READ_EXTERNAL_STORAGE, true);\nNext line of code:\nreader.setProperty(AbstractGridFormat.READ_EXTERNAL_STORAGE, true);\nNext line of code:\nreader.setProperty(AbstractGridFormat", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": "        ((Creature) e).setType(type);\n        }\n        \n        return e;\n    }\n    \n    public static void main(String[] args) {\n        MACreature e = MACreature.fromString(args[0]);\n        System.out.println", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": "            for( int i = 0; i < height; ++i )\n            {\n                int color = bin.ReadUInt16();\n                int next = bin.ReadInt32();\n                if( color == 0 )\n                {\n                    color = 0x8000;\n                }\n                ", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": "                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16);\n                    if (house == null)\n                        house = BaseHouse.FindHouseAt(new Point3D", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": "Next line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": "    reader = supported_extensions().get(fname, None)\n    if reader is None:\n        raise IOError(\"File %s does not exist\" % fname)\n    return reader\n\nThe function find_reader() takes a filename as an argument and returns the associated reader class. This", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": "\tif (cell.getNumVersions() > 1)\nNext line of code:\n\t{\n\t\t\t\t\t\t\tif (cell.getNumVersions() > 1)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdouble x = cell.getX() + (cell.getWidth() / 2);\n\t\t\t\t\t\t\t\tdouble y =", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": "No, I cannot provide the next line of code for you.", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": "    out_list += [weights_dmat_all[index]]\n    out_comment = 'Weighted distortion matrix'\n    out_units = ['']\n    out_names += ['WDM_' + name]\n    out_list += [weights_dmat_all[index", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": "    if obj.startswith(b\"\\xEF\\xBB\\xBF\"):\n        obj = obj[3:]\n    # remove BOM if present\nNext line of code:\n    if obj.startswith(b\"\\xEF\\xBB\\xBF\"):\n", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": "if (orig == null ||!orig.exists() || orig.length() == 0)\nNext line of code:\nif (newId!= 0)\nNext line of code:\nif (mDbHelper.getBookUuid(newId) == null)\nNext line of code:\n", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": "        tableStrengthScore.add(opponent.getKey(), opponent.getValue());\n        }\n        tableStrengthScore.sort(Comparator.comparing(PlayerScore::getScore));\n        for (int i = 0; i < tableStrengthScore.size(); i++) {\n", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": "    res = c.get(\"/\")\n    res.get_data()\n    assert res.status_code == 401\n    # Load / with invalid auth\nNext line of code:\n    res = c.get(\"/invalid-auth\")\n    res.get_data()\n    assert res", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": "            nsClientService = mLocalBinder.getService();\n            aapsLogger.debug(LTag.NSCLIENT, \"Service is connected\");\n            nsClientService.onServiceConnected(this);\n        }\n    };\n}", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": "    make_flags = \"\"\n    if arch == \"amd64\" and makefile is None:\n        make_flags = \"VC-WIN64A\"\n    elif arch == \"x64\" and makefile is None:\n        make_flags = \"VC-WIN64A\"\n    ", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": "towerList[index].baseStat.costs[j]=towerList[index].baseStat.costs[j] + towerList[index].baseStat.costs[j] * towerList[index].baseStat.costs[j];\n\nNext line of code:\n", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": "index = AddCraft( typeof( GuardianAxe ), 1011082, 1025187, 33.0, 72.0, typeof( IronIngot ), 1044036, 16, 1044037 );\nAddRecipe( index, 34 );\nSetNeededExpansion( index, Expansion.", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": "    def test_help(self, capsys):\n        \"\"\"tests getting help\"\"\"\n        options = super().test_help(capsys)\n        print(options)\n        print(capsys.getoutput())\n        print(capsys.getoutput())\n        print(capsys.", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": "\nGenerateImplementorIface (sw, gen_info);\n\nNext line of code:\n\nGenerateImplementorIface (sw, gen_info);\n\nNext line of code:\n\nGenerateImplementorIface (sw, gen_info);\n\nNext line of code", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": "    data = json.loads(data)\n    for key, value in data.items():\n        if key in fields:\n            if value:\n                fos.set(key, value)\n\nUsage:\n    main(json, fos)\n\nOutput:\nUsage:", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": "\npublic void setLoading(boolean loading) {\n    this.loading = loading;\n}\n\npublic void setLoadElement(Element loadElement) {\n    this.loadElement = loadElement;\n}\n\npublic void setPresentableTextContainer(Element presentableTextContainer) {\n    ", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": "            return prevChildren.Concat(\n                (dbCount - StartPagingTreshold + PageSize - 1) / PageSize\n               .Select(i => childFactory(query.Parent, (StartPagingTreshold + i * PageSize + 1) + \"-\" + (StartPaging", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": "        soaResponse = dns.message.make_response(query)\n        soaResponse.use_edns(False)\n        soaResponse.answer.append(soa)\n        responses.append(soaResponse)\n        responses.append(soaResponse)", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": "    return kind;\n}", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": "            return this.FindControlRecursive(LabelForDescriptionID) as Label;\nNext line of code:\n            return this.FindControlRecursive(LabelForTitleID) as Label;\nNext line of code:\n            return this.FindControlRecursive(LabelForTitleID", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": "    query_args = self.calling_format.build_query_args(query_args)\n        else:\n            query_args = None\n        path = self.calling_format.build_path_base(bucket, key, host, query_args)\n        auth_", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": "canvas.drawBitmap(tiles[i].getTileBitmap(), left, top, null);\nNext line of code:\ncanvas.drawBitmap(tiles[i].getTileBitmap(), right, bottom, null);\nNext line of code:\ncanvas.drawBitmap(tiles[i].", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": "        HueInfo = new Dictionary<DyeType, Tuple<int, int>>\n        {\n            { DyeType.None, new Tuple<int, int>(0, 0) },\n            { DyeType.Red, new Tuple<int, int>(0, 1", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": "                this.certAddModal.getModals().remove(this.certAddModal.getModals().indexOf(this.certAddModal));\n                this.certAddModal.getModals().add(this.certAddModal);\n                this.certAddModal.show();\n            }", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": "\"    {0}\" +\n\"    Public Class SomeClass{0}\" +\n\"        {0}\" +\n\"        Private Sub SomeMethod(Of T As  {{0}, New, {0}, S, IDisposable}){0}\" +\n\"    End Class{0}\" +\n", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": "    if os.access(self.file + os.extsep + ext, os.F_OK):\n        list.append(self.file + os.extsep + ext)\n\nThe code is not complete, but it shows the basic idea of how to implement a memory-based cache.", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": "    return description;\n    }\n}", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": "    all_plugins = self._bot.plugin_manager.get_all_active_plugin_names()\n        return '\\n'.join(all_plugins)\n        return '\\n'.join(self._bot.plugin_manager.get_all_active_plugin_names())\n        return", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": "    \"system_switch_interface\": {\"required\": False, \"type\": \"dict\",\n                                \"choices\": [\"implicit\", \"explicit\"]},\n    \"name\": {\"required\": False, \"type\": \"str\", \"default\": None},\n    \"vdom\": {\"required", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": "            throw new IOException();\n        }\n        if (savedDecoder!= null) {\n            savedDecoder.reset();\n        }\n    }\n    private Object clone(Object obj) {\n        if (obj instanceof Object) {\n            return (Object) obj.clone();\n        } else", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": "return originalObject!= null;\ncase ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE:\nreturn getTraceSequence()!= null;\ndefault:\nreturn super.eIsSet(featureID);\n}\n\t}\n}", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": "OnmsIpInterface m_iface = null;\nNext line of code:\nOnmsIpInterface m_iface = null;\nNext line of code:\nOnmsIpInterface m_iface = null;\nNext line of code:\nOnmsIpInterface m_iface = null", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": "    if not changed:\n        module.exit_json(changed=False, msg=\"No tables need to be published\")\n    # Check if tables need to be added:\n    if tables:\n        if not transformation_tables(tables, cursor, publication, owner):\n            module.exit", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": "\t}\n}", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": "    cost = T.mean(self.n_visible * T.log(1 + T.exp(fe_xi_flip))\nTheano will optimize this expression for the cross-entropy.\n\nThe problem is that the sigmoid function is not differentiable at 0.\nThis means that", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": "            ITripChain clone = new TripChain(this);\n            clone.Trips = new List<ITrip>(3);\n            clone.Trips.Add(new Trip(this.TripChains.Peek().TripChain));\n            clone.Trips.Add(new Trip", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": "    this.role = figEdge.getRole();\n    this.ordering = figEdge.getOrdering();\n    this.arrowType = figEdge.getArrowType();\n    this.figEdge = figEdge;\n    this.getOwner();\n    this.getDestGroup();", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": "                    throw new Exception(string.Format(\"Unable to create performance counter: {0} {1} {2}\", ex.Message, ex.Source, ex.StackTrace));\n                }\n            }\n        }\n    }\n}", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": "    for i,c in enumerate(connections):\n        assert checksums.qsize() == 10\n        assert checksums.get(block=False) == (c,\"foo-%d\" % i)\n        assert checksums.get(block=False) == (c,\"foo-%d\"", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": "stac = self.stack_count\n\nThe code is a stacker that takes a pseudop as an argument and pushes the value of the pseudop onto the stack.", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": "\tresult += \"\\x00\" * mem_len\n\t\t\t\tresult += self.data.read(file_len, mem_len)\n\t\t\t\tofs += mem_len\n\t\t\t\tlen -= mem_len\n\t\t\t\tofs += mem_len\n\treturn result\ndef main():\n\tparser = ELF", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": "\treturn value.substring(startIndex + 1, value.length());\n\t} catch (Exception e) {\n\t}\n\treturn value;\n\t}\n}", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": "elements.add(ASN1Boolean.encodeAsBoolean(includeAuthNEntry));\n    }\n    if (! includeAuthZEntry)\n    {\nNext line of code:\nelements.add(ASN1Boolean.encodeAsBoolean(includeAuthZEntry));\n    }\n    ", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": "coll.addAll(buildFromBeanCollection(beans));\n\t}\n}", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": "return null;\n}\n}\n}", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": "        }\n        public void SerializeToStream(IRequestContext requestContext, object response, Stream responseStream)\n        {\n            var contentType = requestContext.ResponseContentType;\n            var serializer = GetResponseSerializer(contentType);\n            if (serializer == null)\n                ", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": "            ContactInfo contactInfo = contactFinder.GetContactInformation(CallNumber);\n            launchUrl(createUrl(contactInfo.Id, contactInfo.Type));\n            return;\n        }\n    }\n    public void ShowEmailRecord(Guid EmailId)\n    {\n        if (", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": "    public void explain(Connection connection) throws SQLException {\n        Statement s = connection.createStatement();\n        s.execute(getExplainText());\n        s.close();\n    }", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": "        i20 = i18 + i16 - 1;\n        i21 = i20 + i19;\n        i22 = i21 + i19;\n        i23 = i22 + i19;\n        i24 = i23 + i19;\n        i25 = i24 +", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": "                Matcher matcher = keySizePattern.matcher(constraintEntry);\n                if (matcher.matches()) {\n                    int keySize = Integer.parseInt(matcher.group(1));\n                    if (keySize < 0) {\n                        throw new IllegalArgumentException(\n                                \"", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": "   edge = new ProxyToDeviceEdge(proxyCell, deviceCell, attributes);\n   cs.addEdge(edge);\n   return edge;\n}\n\nThe code above is used to create a connection between a proxy cell and a device cell. The method first checks if the two cells are of", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": "                return this.submitText;\n            }\n            set\n            {\n                this.submitText = value;\n            }\n        }\n        /// <summary>\n        /// \n        /// </summary>\n        [Meta]\n        [ConfigOption]\n        [Category(\"6.", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": "    def __init__(self, root_path, warnings=None, report_progress=None):\n        self.root_path = root_path\n        self.file_path = None\n        self.collection = {}\n        self.albums = {}\n        self.artists = {}", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": "        SecurityManager sm = System.getSecurityManager();\n        if (sm!= null)\n            sm.checkPermission(SecurityConstants.GET_CLASS_LOADER_PERMISSION);\n    }\n    private static void checkConfiguration(ModuleLayer layer,\n                                           List<ModuleLayer> parents", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": "            }\n            else\n            {\n                MarkOrderAsShipped(order);\n            }\n            }\n            /// <summary>\n            /// Marks the order as shipped\n            /// </summary>\n            /// <param name=\"order\">Order</param>\n            public virtual void MarkOrder", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": "        AutoNumberingScheme autoNumberingScheme = new AutoNumberingScheme();\n        autoNumberingScheme.initialize();\n        autoNumberingScheme.setSchemeName(schemeName);\n        autoNumberingScheme.setSchemeClassName(schemeClassName);\n        autoNumberingScheme.setFormatName(", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": "            Assert.That (source.SingleOrDefault (), Is.EqualTo (0));\nNext line of code:\n            Assert.That (source.SingleOrDefault (), Is.EqualTo (0));\n\t\t}\n\t\t[Test]\n\t\t[ExpectedException (typeof (InvalidOperationException))]", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": "Plot p = new Plot(dstDir,\n\t\t\t\t\t\t\t\t\t\t\t\tPlotFilenames.get(name),\n\t\t\t\t\t\t\t\t\t\t\t\tPlotFilenames\n\t\t\t\t\t\t\t\t\t\t.get(name) + \" @ \"\n\t\t\t\t\t\t\t\t\t\t\t\t+ timestamps[i], type);\nNext line of code:\nPlot pCdf = new", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": "    self.enabled_list = MemoryDevice(['LSA', 'LSA'])\n\nThis next line of code:\n    self.enabled_list = MemoryDevice(['LSA', 'LSA'])\n\nis not correct. It should be:\n    self.enabled_list = MemoryDevice(['", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": "    if (success) {\n      return buildPath;\n    } else {\n      throw new RunnerException(\n        _(\"Could not upload sketch to board. See log for details.\"));\n    }\n  }\n}", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": "    c = Workplane().box(1,1,1).faces(\"+Y\").edges()\n    c.fillet(0.2)\nThe solid containing the edges will be saved in the stack, and the filleted edges will be added to the solid.\n        \"\"\"\n        solidRef", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": "    self.setDMPEnabled(True)\nNext line of code:\n    self.setDMPEnabled(False)\nNext line of code:\n    self.setDMPEnabled(True)\nNext line of code:\n    self.setDMPEnabled(False)\nNext line", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": "\tfor name in names['names']:\n\t\tprint name\n\n@frappe.whitelist()\ndef bulk_print_memberships(json_data):\n\tif json_data:\n\t\tfor name in json_data['names']:\n\t\t\tprint name\n\n@f", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "\tif (itHistory.hasNext()) {\nNext line of code:\n\tFLRProjekt projekt = (FLRProjekt) itHistory.next();\nNext line of code:\n\tdata[i][ProjektReportFac.REPORT_PROJEKT_", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": "            }\n            else if (this.m_SetEquipped &&!this.IsSetItem)\n            {\n                this.m_SetEquipped = true;\n                this.m_SetEquipped = false;\n                this.m_SetEquipped = true;\n            }", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": "         sb.append((char) ('a' + d - 10));\n      }\n      d = c & 0x3f;\n      if (d < 10) {\n         sb.append((char) ('0' + d));\n      } else {\n         sb.append((char", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": "if (type == PacketTypes.ServerSideConfig)\n{\n\tServerSideConfig.HandleServerGetData(e.Data);\n}\nNext line of code:\nif (type == PacketTypes.Region)\n{\n\tRegionManager.HandleServerGetData(e.Data);\n}", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": "\nif (organizationId == null) {\n    throw new ApiException(400, \"Missing the required parameter 'organizationId' when calling findOrganizationPublicTransportStops\");\n}\n\nNext line of code:\n\nlocalVarPostBody = new HashMap<String, Object>();\n\nNext", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": "        X       -   array[0..N-1] - array of quadrature nodes,\n                        in ascending order.\n        W       -   array[0..N] - array of quadrature weights.\n        \n        Output PARAMETERS:\n        Info    -   error code:", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": "        parent.children,'subtree', 'deletion', 'course', 'run', 'branch', 'course_agnostic', 'course_agnostic', 'course_agnostic', 'course_agnostic', 'course_agnostic', 'course_agnostic', 'course_agnostic',", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": "                                    + Math.pow(10, i) + (Math.pow(10, i) * j);\n                                }\n                                else {\n                                    //not log10 tick label\n                                    tickLabel = \"1e#\";\n                                    //create label for tick\n                                    ", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": "        assertTrue(newBundlePushedAssets.contains(template.getIdentifier()));\n    }\n}", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": "        Map<String, String> params = new HashMap<>();\n        params.put(\"include\", \"path\");\n        params.put(\"path\", content);\n        params.put(\"allowableOperations\", \"create\");\n        params.put(\"host\", \"public\");\n        params.put(\"", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": "        } catch (NumberFormatException e) {\n            return false;\n        }\n        return true;\n    }\n    private boolean isNumber(String val) {\n        try {\n            NumberUtils.toNumber(val);\n            return true;\n        } catch (NumberFormatException", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": "                                grapple.AttachPart(part);\n                            }\n                        }\n                    }\n                }\n                return part;\n            }\n        }", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": "    if not res:\n        raise ValueError('No such record: %s' % (model, key))\n        res_id = res[0]\n        if not res_id:\n            raise ValueError('No such record: %s' % (model, key))\n        if", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": "            return actionTL.getVolatile()== SYNCHRONIZE_CODE;\n        }\n    }", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": "long value = lgetxattr (path, name, value, 0);\nNext line of code:\nreturn value;\nNext line of code:\nreturn value;\nNext line of code:\nreturn value;\nNext line of code:\nreturn value;\nNext line of code:\nreturn", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": "ims.framework.utils.ImageHelper(id, path, width, height);\n\t\t\t\tsuper(id, path, width, height);\n\t\t\t}\n\t\t}\n\t\tprivate final class ImageHelper(int id, String path, Integer width, Integer height)\n\t\t{\n\t\t\tprivate ImageHelper", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": "    return Base64.encodeBytes( source, off, len, options );\n    }   // end encodeBytes\n    \n    \n    /**\n     * Encodes a byte array into Base64 notation.\n     * Does not GZip-compress data.\n     *\n     * @param source", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": "Next line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": "u1 = u1.Add(q[0]);\nNext line of code:\nu3 = q[1];\nNext line of code:\nu2 = u2.Add(q[1]);\nNext line of code:\nu3 = u3.Subtract(q[1", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": "                if (_abi_info == null) {\n                    _abi_info = new GLib.AbiStruct ();\n                }\n                return _abi_info;\n            }\n            set {\n                _abi_info = value;\n            }\n        }\n        public override string To", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": "                if (name.endsWith(\".fig\")) {\n                    name = name.substring(0, name.length()-4);\n                }\n                theFile = new File(name);\n            }\n            return theFile;\n        }\n        return null;\n    }\n    \n", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": "            5: SortableHeader('Outline', False, '', 'col-center'),\n            6: SortableHeader('Script', False, '', 'col-center'),\n            7: SortableHeader('Slide', False, '', 'col-center'),\n            8: SortableHeader('Video", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": "        }\n        public void opByteSS(byte[] rso, byte[] bso)\n        {\n            test(bso.Length == 4);\n            test(bso[0] == 0x01);\n            test(bso[1] == 0x11);\n            ", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": "    return self._default_manager.filter(**unique_check).exclude(pk=model_class_pk).exists()\n\nThe code is checking if the model instance has a unique value for the unique_check field. If it does, it returns True, otherwise it returns False.", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": "    for ikey, ivalue in paramtestdic.iteritems():\n        if nptype==\"claverie\" or nptype==\"claverielist\":\n            yrel = 4*PI*NS*rsolvtest*rsolvtest*rsolv", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": "    for h in h:\n        heads.append(h)\n    if len(heads)!= len(h):\n        raise util.Abort(_('check:heads: heads and h do not match'))\nop.reply.newpart('heads', ''.join(heads), mandatory=", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": "        return new Dimension(prefWidth, prefHeight);\n    }\n    \n    private Command showPackedImpl(int position, boolean modal, boolean disposeOnRotation) {\n        Command showCommand = getShowCommand(position, modal, disposeOnRotation);\n        if(showCommand ==", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": "    for row in range(grid.model.row_count):\n        for col in range(grid.model.col_count):\n            cell_attributes = cas_data_str.split(',')\n            cell_attributes = [cell_attributes[i] for i in range(len", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "                    cursor_bits[x * width + y] = cursor_bitmap.GetPixel(x, y);\n                    mask_bits[x * width + y] = mask_bitmap.GetPixel(x, y);\n                }\n            }\n            cursor = Win32CreateCursor(", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": "if(dateLastTimeSlot.TimeOfDay.TotalMinutes < apptLengthMins) {\n\tdateLastTimeSlot = dateLastTimeSlot.AddMinutes(apptLengthMins);\n}\ntableAvailableTimes.Rows.Add(dateLastTimeSlot.TimeOfDay.", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": "pMem1.enc == pMem2.enc );\n        return sqlite3VdbeMemCompareText( pMem1, pMem2, pColl );\n      }\n      /* If both values are blobs, compare them as integers.\n      ** If one is a number and the other", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": "                    }\n                    else if (changesMask[130 + i])\n                    {\nNext line of code:\n                    }\n                    else if (changesMask[131 + i])\n                    {\nNext line of code:\n                    }\n                    else if (changesMask[132 + i])\n                    ", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "        # enter catg for this snp\n        cidx, coffset = tup\n        self.vcfd[nidx] += self.catgs[cidx, coffset]\n\nThe code is a bit messy, but it does the following:\n\nLoad the snps,", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": "            Index allClasses = allClasses.getIndexByTag(tag);\n            if (allClasses == null)\n                allClasses = new Index[CONSTANT_Limit];\n            Index allClasses = allClasses.getIndexByTag(classRef.stringValue());\n            if (allClasses ==", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": "\nthis.quoteLabel.Text = \"This tool allows you to create, edit, and view 3D models of buildings, rooms, and other objects. It also allows you to create and edit maps, and to view and edit the information about the objects in the map. It also allows you to create and edit", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": "    if rule._freq < 4:\n        rule.freq = rule._freq\n    if rule.count:\n        rule.count = rule.count\n    if rule.count < 0:\n        rule.count = 0\n    if rule.count < 0:\n        rule.count =", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": "            }\n            return fout.ToArray();\n        }\n    }", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": "    }\n    \n    public override bool IsInitialized {\n      get {\n        return true;\n      }\n    }\n    \n    public override void WriteTo(pb::ICodedOutputStream output) {\n      if (_reportRefundRequestFieldNames!= null) {\n        for (", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": "                        if (rv.RowType == DataRowType.DataRow)\n                        {\n                            MainDs.AApDocumentDetail.Rows.Add(rv);\n                        }\n                    }\n                }\n                if (MainDs.AApDocumentPayment.Rows.Count > 0)\n                ", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": "                if (RewardAction!= null && RewardAction.IsCompleted())\n                {\n                    if (RewardAttachment!= null && RewardAttachment.IsCompleted())\n                    {\n                        if (RewardItem!= null && RewardItem.IsCompleted())\n                        {\n                            ", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": "            return items.Length;\n        }\n        }\n\t    public global::System.Collections.Generic.KeyValuePair<TKey, TValue> this[int index]\n\t    {\n\t        get\n\t        {\n\t            if (index < 0 || index >= items.Length)\n\t                throw", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": "                ArgumentPanel.Controls.Add(AControl);\n                if (AControlLabel!= null)\n                {\n                    ArgumentPanel.Controls.Add(new Label()\n                    {\n                        AutoSize = true,\n                        Text = AControlLabel.Text,\n                        Font = new Font(Font", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": "            return Unique(target, null);\n        }\n\t\t/// <summary>\n\t\t/// Returns a new list containing only the unique elements of the target collection, preserving the order.\n\t\t/// The specified <see cref=\"IEqualityComparer{T}\"/> is used to determine uniqueness.\n\t\t", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": "\nNext line of code:", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": "html.WriteLine(\"      table.commands { border-collapse: collapse; border-spacing: 0px; width: 100%; }\");\nhtml.WriteLine(\"      table.commands th { text-align: left; padding-left: 10px; }\");\nhtml.WriteLine(\"      table.commands td", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": "buff[4] = (byte)((address & 0x000000ff) | 0x00);\nNext line of code:\nbuff[5] = (byte)((address & 0x000000ff) | 0x00);\nNext line of code:\nbuff[6] = (byte)(", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": "            else:\n                min_distance = min(min_distance, abs(node.split - x[node.split_dim]))\n                sd = list(side_distances)\n                sd[node.split_dim] = min_distance\n                heappush(q, (-distance", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": "\t}\n\t@Test\n\tpublic void knightFirst2()\n\t{\n\t\t// knight first\n\t\tString acn = \"1. e4 e5 2. Nf3 Nc6 3. Bc4 Nf6 4. Nc3 Nxe4 5. Nxe4", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": "\nreturn null;\n\n}", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": "                    Type type = reader.ReadType();\n                    if (type!= null)\n                    {\n                        m_arSpellDefense.Add(type);\n                    }\n                }\n                iCount = reader.ReadInt();\n                for (i = 0; i < iCount; i", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": "                                newlines.Add(newsector);\n                                sidescreated = true;\n                            }\n                        }\n                    }\n                }\n                // Now that we have created the sectors, we need to merge them\n                // together.\n                foreach(Linedef ld in newlines", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": "        if not based_on_rev.is_localizable():\n            raise ValueError('Cannot translate this document.')\n    except ValueError:\n        raise ValueError('Translation is not possible for this document.')\n    if not based_on_rev.is_localizable():\n        ", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": "            }\n            \n            // now we'll add new rows when needed\n            for (i=0; i < rows.Count; i++) {\n                if (rows[i].Dimension.height > lNewMaxRows) {\n                    lNewMaxRows = rows[i].Dimension", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": "\nif( objectsToSearchSet.Contains( script ) )\n\nthen the script is not a MonoBehaviour, but a ScriptableObject.\n\nif( objectsToSearchSet.Contains( script ) )\n\nthen the script is a ScriptableObject, not a MonoBehaviour.\n\n", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": "if (trait!= null)\n{\n\ttrait.Value.Nodes.Add(new MiniYamlNode(\"-InvulnerabilityUpgrade\", new MiniYaml(null)));\n}\nif (depth == 1)\n{\n\tif (node.Value.Nodes.Count >", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": "    return SortedList(values, key=self._key)\n    def __iadd__(self, other):\n        \"\"\"Return new sorted-key list containing all values from `other` in sorted-key order.\n        Runtime complexity: `O(n*log(n))`\n        ", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": "    self.session.commit()\n    self.session.rollback()\n    self.session.close()\n    self.session.disconnect()\n    self.session = None\n    self.transaction = None\n    self.autoflush = False\n    self.is_active =", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": "            }\n            return true;\n        }\n        public override bool CanBeWornBy(Mobile from)\n        {\n            if (!Ethics.Ethic.CheckEquip(from, this))\n                return false;\n            if (from.Race == Race.Gargoyle &&", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": "\nNo", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": "    for (int i = 0; i < emails.length(); i++) {\n        JSONObject email = emails.optJSONObject(i);\n        JSONArray emailTypes = email.optJSONArray(\"type\");\n        if (emailTypes!= null && emailTypes.length() > 0) {", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": "            return result.ToString();\n        }\n        private static List<string> ParseList(IDictionary spec, object value)\n        {\n            if (value == null)\n                return new List<string>();\n            if (value is List<string>)\n                return (List<string>)", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": "            int[] blkSizes = new int[1];\nNext line of code:\n            int[] blkSizes = new int[1];\nNext line of code:\n            int[] blkSizes = new int[1];\nNext line of code:\n            int[] bl", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": "                    }\n                    break;\n                case 0xDA:\n                    {   // getActorHit\n                        int x = args[1] + (Camera.CurrentPosition.X & 7);\n                        int y = args[2] + ScreenTop;\n                        int hit = 0;\n                        for", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": "                    iFile.close();\n                }\n            }\n            else\n            {\n                throw new ObjectStoreException(new String(\n                        \"No log instance found for log name: \" + logName));\n            }\n        }\n    }\n    private final boolean deleteEntries()\n    ", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": "track.setTrackPoints( trackSegmentPoints ) ;\n\nNext line of code:\ntrack.setSrc( CREDITS ) ;\n\nNext line of code:\ntrack.setSrc( CREDITS ) ;\n\nNext line of code:\ntrack.setSrc( CREDITS )", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": "\"    {0}\" +\n\"    <A(),  <B(), <C(), <D(), <E(), <F(), <G(), <H(), <I(), <J(), <K(), <L(), <M(), <N(), <O(), <P(), <Q(), <R(),", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": "            Spells.Add(\n                new SpellData\n                {\n                    ChampionName = \"Jhin\",\n                    SpellName = \"JhinRShot\",\n                    Slot = SpellSlot.R,\n                    Type = SkillShotType.SkillshotMissile", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": "                    }\n                    else\n                    {\n                        newHouse.InternalizedVendors.Clear();\n                        newHouse.InternalizedBans.Clear();\n                    }\n                    newHouse.House = m_House;\n                    newHouse.House.Access = m_House.Access;\n                    ", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": "\t}\n}", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "                    self._remove_additionalproperty( listitem, \"widgetName\" + widgetID )\n                    self._add_additionalproperty( listitem, \"widgetName\" + widgetID, widgetName )\n                    self.changeMade = True\n                else:\n                    self._remove_additionalproperty( list", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": "        return encodeBytesToBytes( source, 0, source.length, Base64.NO_OPTIONS );\n    }   // end encodeBytesToBytes\n    \n    \n    /**\n     * Similar to {@link #encodeBytes(byte[])} but returns a byte array instead of instantiating a", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": "    }\n    public static int mnem(int opcode) {\n        return mnem[opcode];\n    }\n    public static String mnem(int opcode, int typecode) {\n        return mnem(opcode, typecode, true);\n    }\n    public", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "    if not self.cleanup(dest):\n        self.fail_json(msg='Could not replace file: %s to %s: %s' % (src, dest, e))\n\nThe code above is a part of a module called ansible_utils.py. This module is used", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": "\nif (c == 'a' || c == 'A' || c == 'z' || c == 'Z' || c == '0' || c == '1' || c == '2' || c == '3') {\n\n} else {\n\n}\n\n}\n\t\t\t\t", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": "        if (dataBuffer!= null) {\n            for (int i = 0; i < data.length; i++) {\n                if (data[i] < 0) {\n                    throw new RasterFormatException(\"Data buffer for component \"\n                            + i + \" has negative values\");", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "    try:\n        with open(filename, 'r') as f:\n            shared_mem = f.read()\n    except IOError:\n        logging.error(\"Failed to read shared memory info from %s\", filename)\n        return None\n    try:\n        shared_mem =", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": "    # - Initialize the delta object with the arguments passed in.\n    delta = Delta(g.db_api, g.namespace.id, g.db_session, args)\n    # - Initialize the delta object with the arguments passed in.\n    delta = Delta(g.db_api", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": "    is_active = models.BooleanField(default=True)\nNext line of code:\n    is_enrolled = models.BooleanField(default=False)\nNext line of code:\n    is_enrolled_in = models.ForeignKey(CourseEnrollment, on_delete", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": "    if not self.user_confirm('Remove these custom values [y/N]:'):\n        return\n        for system in systems:\n            system_id = self.get_system_id(system)\n            if not system_id:\n                continue\n            print('Removing Custom Value", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": "\nYes, I understand the task.", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": "Next line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code:\nNext line of code", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": "                collision_optimized = false;\n                // Iterate through all the prims in this character\nNext line of code:\n                foreach (d.GeomPrim p in chr.GeomPrims)\n                {\n                    // Iterate through all the prims in this character\nNext", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": "    for t in ts:\n        t.start()\n    for t in ts:\n        t.join()\nTask Stats:\n    total_recs: %d\n    insert_queue: %d\n    correct_queue: %d\n    finished_queue: %d\n    ", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": "    price_subtotal = fields.Float(string='Subtotal',\n        required=True,\n        default=_default_price_unit,\n        help=\"The price of the product, including tax, if applicable.\")\n    price_total = fields.Float(string='Total',\n        ", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": "    io.write(self.get_data(variables, gather, clear))\n\nThe code above is a part of a class called BasePopulation, which is a subclass of Population. It is used to write the recorded data to a file.\n\nThe code above is a part of a class called Base", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": "            return new UnaryExpression(value) {\n                @Override\n                public String getOperator() {\n                    return \"-\";\n                }\n                @Override\n                public Object evaluate(Object namespace) {\n                    return -value.doubleValue();\n                }\n            };\n        };\n    ", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": "SpellData = new SpellData\n{\n    ChampionName = \"Lucian\",\n    SpellName = \"LucianRMis\",\n    Slot = SpellSlot.R,\n    Type = SkillShotType.SkillshotMissileLine,\n    Delay =", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": "                    \"   NEW: \" + nodeUpdate);\n        }\n        return true;\n    }\n    \n    /**\n     * Helper method to retrieve the node's current version.\n     * @param nodeId the node ID\n     * @return the node's current version\n     */\n", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": "      if (crossDim!= 0) {\n        crossDim = remainingFreeSpace / itemsOnLine;\n      }\n      if (crossDim!= 0) {\n        mainDim += crossDim;\n      }\n      if (mainDim < 0) {\n        mainDim = 0;\n", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": "                yAxis.DrawGrid( g, this, scaleFactor, shiftPos );\nNext line of code:\n                shiftPos += yAxis.CalcScaleRange();\n            }\n            foreach ( Y2Axis y2Axis in _y2AxisList )\n            {\n                y2Axis", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": "            if (info!= 0) \n                throw new ILArgumentException(\"qr: error during decomposition. Info=\" + info.ToString()); \n            return ret; \n        }\n        /// <summary>\n        /// QR decomposition with pivoting\n        /// </summary>\n        /// <param name=\"A\">", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": "                c.setLayout(layout);\n            }\n        }\n    }\n}", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "                if (c == '\\n') {\n                    comments_seen = true;\n                    break;\n                }\n                if (c == '\\r') {\n                    comments_seen = true;\n                    break;\n                }\n                if (c == '\\t') {\n                    c = get", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "        for s in states.values():\n            s.onEnter(env, self.__properties)\n            if s.isRelocatable:\n                if s.isRoot():\n                    if s.isRoot():\n                        if s.isRoot():\n                            if s.isRoot():", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": "xmlWriter.WriteAttributeString(\"IsDockablePane\", \"true\");\n            SaveLayout(xmlWriter, pane.HostedPane as DockableContent);\n            xmlWriter.WriteAttributeString(\"IsDockablePane\", \"false\");\n            SaveLayout(xmlWriter, pane.Hosted", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": "            &nbsp;&nbsp;&nbsp;- configuration file \\\"websearch_external_collections_config.py\\\" has %(number_file)s collections\n<br />\n                    &nbsp;&nbsp;&nbsp;- database table \\\"externalcollection\\\" has %(number_db)s collections\n<", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "\ndef get_artist_name(artist_id):\n    \"\"\"Returns the artist name associated with the given ID.\"\"\"\n    artist = Artist(artist_id, self.network)\n    return artist.getArtistName()\n\nThe code is not complete, but it should", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": "        public RESULT createStream            (byte[] data, MODE mode, ref CREATESOUNDEXINFO exinfo, ref Sound sound)\n        {\n            RESULT result           = RESULT.OK;\n            IntPtr      soundraw    = new IntPtr();\n            Sound       soundnew    =", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": "                            desc = desc[0]\n                            if desc[0] == '(' and desc[1] == ')' and desc[2] == ',':\n                                desc = desc[2:]\n                            if desc!= None and desc[0] == '(' and desc[1", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": "    masterPotential = self._masterPotentialM[masterNum].toDense()\n    masterPermanence = self._masterPermanenceM[masterNum].toDense()\n    masterConnected = self._masterConnectedM[masterNum].toDense()\n    master", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": "\nself.new_node_uuid = self.cfg.GetInstanceInfo(self.instance_uuid).primary\n\nThe code is checking if the instance has a secondary node, and if it does, it sets the new node to be the secondary node. If not, it sets the new node to be", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": "    if isBoolean(vmap, optionPrefix):\n        complt += \" -\" + hasDescription(vmap) + \" \" + optionPrefix + \" \" + vmap['optDefault']\n    else:\n        complt += \" -\" + hasDescription(vmap) + \" \"", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": "            }\n        }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public IDamageable Target { get { return m_Target; } set { m_Target = value; } }\n        [CommandProperty(AccessLevel.GameMaster)]\n        public Point3D TargetLocation", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": "    return contains;\n}\n", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": "                            side1 += bmp_mono[n1] * bmp_mono[n1];\n                        }\n                        if (y + r < image_height)\n                        {\n                            int n2 = ((y + r) * image_width) + x;\nNext", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": "z = new double[2];\nz[0] = Math.sqrt(7.0) - 4.0;\nz[1] = Math.sqrt(7.0) - 4.0;\nbreak;\n\t\t case 11:\nNext line of code:\nz = new double[", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "        fields = databaseMeta.getDatabaseInterface().getDataMeta(tableName);\n\nNext line of code:\n        for (int i=0;i<fields.size();i++)\n        {\n            if (i>0) retval.append(\", \"); else retval.append", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": "\t}\nNo", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": "\nwx.EVT_LEFT_DOWN\nwx.EVT_LEFT_UP\nwx.EVT_MOTION\nwx.EVT_MOTION\nwx.EVT_MOTION\nwx.EVT_MOTION\nwx.EVT_MOTION\n", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": "            mute = (m!= 0);\n            return result;\n        }\n        public RESULT setPriority        (int priority)\n        {\n            return FMOD_EventCategory_SetPriority(eventcategoryraw, priority);\n        }\n        public RESULT getPriority        (ref int", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": "public override void AfterKeywords(NpcBookPairs npcBookPairs)\n{\n\t// Report if PTJ is in progress\n\tif (npcBookPairs.Count > 0)\n\t{\n\t\tnpcBookPairs.Add(new NpcBookPair { N", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": "            bais = null;\n        }   // end finally\n        \n        return obj;\n    }   // end decodeToObject\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "            if e.nodeName == \"layout\":\n                self.layoutNode = e\n                self.layoutID = e.getAttribute('id')\n                self.isDefault = e.getAttribute('isDefault')\n                self.width = e.getAttribute('width')\n                self.", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": "            {\n                BigInteger n = new BigInteger(1);\n                n = n.modPow(this, this);\n                n = n.modPow(this, this);\n                n = n.modPow(this, this);\n                n = n.modPow(this,", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "    if cdata is None:\n        return\n    if not isinstance(cdata, T.Index):\n        return\n    if not isinstance(cdata, T.Index):\n        return\n    if not isinstance(cdata, T.Index):\n        return\n    if not isinstance(", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": "    ## attribute.h (module 'core'): bool ns3::AttributeAccessor::Get(ns3::ObjectBase const * object, ns3::AttributeValue & attribute, ns3::AttributeValue const & defaultValue) const [member function]\n    cls.add_method('Get', \n                   '", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": "                    if (body.get(0) instanceof TemplateText) {\n                        templateTextOptimization = true;\n                    }\n                }\n                if (templateTextOptimization) {\n                    out.print(varName);\n                    out.print(\", \");\n                    out.print(body.", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": "\nif (e.IsInputKey)\n{\n\tif (e.KeyCode == Keys.Tab)\n\t{\n\t\tif (tab_index < tab_count) {\n\t\t\ttab_index++;\n\t\t\treturn PreProcessControlState.MessageNeeded;\n\t\t}\n\t}", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": "        if os.path.exists(md_file_path) is False:\n            raise RuntimeError('Pre-processed file path {0} does not exist.'.format(md_file_path))\n        # load\n        self._myMDWSName = md_file_path\n        ", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "    if '__path__' not in globals:\n        raise ImportError('__package__ not set to a string')\n    if not package.endswith(os.sep):\n        package += os.sep\n    return package\ndef _import_from_path(path, path_", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": "                MethodSymbol method = (MethodSymbol)expression.Method;\n                if (method.IsStatic && method.IsGenericMethodDefinition)\n                {\n                    GenerateImplicitConversionError(diagnostics, syntax, conversion, targetType, method.ReturnType, method.GenericTypeArguments[0],", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "    search_reg_str = search_terms.replace('*', r'[^<]*')\n\nThe code above is a modified version of the original code that searches for phrases instead of single words. It uses the same regular expression, but instead of using the * wildcard, it uses the r'", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "            \n            if self.__IsKeyword(\"FV_IMAGE\"):\n                FvImageSectionObj = Fv.FV()\n                self.__GetFvAttributes(FvImageSectionObj)\n                self.__GetFvAlignment(FvImageSectionObj)\n                self.__GetF", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "    return headers_phase\n    return None\n    return None\n    return None\n    return None\n    return None\n    return None\n    return None\n    return None\n    return None\n    return None\n    return None\n    return None\n    return None\n    return None\n    return", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "return remote_instance.fetch(url, fetch_kwargs={'sort': sort})\n\nThe function returns a DataFrame with the location of the nodes.", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": "                    } else if (ch == MINUS) {\n                        if (groupingCount > 0) {\n                            throw new IllegalArgumentException(\"Unexpected '\\\\-' in pattern \\\"\" +\n                                pattern + '\"');\n                        }\n                        groupingCount = 0;\n                    } else if (ch", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": "        \"\"\"\n        return _richtext.RichTextCtrl_BeginBatchUndo(*args, **kwargs)\n    def EndBatchUndo(*args, **kwargs):\n        \"\"\"\n        EndBatchUndo(self) -> bool\n        End the batch of undo operations\n        \"\"\"\n        return", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": "  exec 2>&1\n  #\n  exec 2>&1\n  #\n  exec 2>&1\n  #\n  exec 2>&1\n  #\n  exec 2>&1\n  #\n  exec 2>&1\n  #\n  exec 2>&1\n  #\n  ", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": "  if (target.getX() - mx == 2) {\n    my = 1;\n  }\n  if (target.getX() - mx == -2) {\n    my = -1;\n  }\n  if (target.getX() - my == 2", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": "\nif ret['ret'] is not None:\n    raise Exception(ret['message'])\n\nThis code checks if the module.params['force'] is set to True or not. If it is, it raises an exception. If not, it continues with the rest of the code.\n\nThe code", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": "        m = ModeFactory.getMode(TaskConstants.MODE_NAME, TaskConstants.TASK_QUERY_REPO_CHILD_CHANNEL_ACTIONS);\n        m.execute(params);\n        List<ChannelActionDAO> childCAs = m.getResult();\n        ", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": "            for (NativeLibrary lib : libs) {\n                if (lib.isBuiltin) {\n                    continue;\n                }\n                if (lib.load(name, isBuiltin)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "            state.s1 = s1;\n            state.s2 = s0;\n            state.magicv = hqrndmagic;\n        }\n        /*************************************************************************\n        HQRNDSeed() - initializes HQRNDState with given seed.\n        Input:\n            ", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": "                hr = (float) radii.getTopRightHorizontalRadius();\n                vr = (float) radii.getTopRightVerticalRadius();\n                // 1 - Top Right:      X - HR, Y + 0\n                dx0 = -hr; dy0 =  vr;\n                dx1 =", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": "    self.base.conf.conf = self._wrapOptParseUsage(self.base.conf.conf)\nHere, self.base.conf.conf is the base.conf object. self.base.conf.conf.conf is the base.conf object with the conf object added. self.", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "            while (retryCount-- > 0) {\n                try {\n                    datafilePath = datafilePath.replaceAll(\"\\\\.\", \"/\");\n                    datafilePath = datafilePath.replaceAll(\"\\\\?\", \"/\");\n                    datafilePath = datafilePath.replaceAll(\"\\\\?\",", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": "                        moduleBeingBuilt.AddDebugDocument(normalizedPath, guid, moduleBeingBuilt.SourceAssembly.Modules.Metadata.PEAssemblySymbol, existingDoc.SourceText, existingDoc.HashAlgorithm, existingDoc.HashAlgorithmName, existingDoc.HashAlgorithmVersion, existingDoc.HashAlgorithmOptions,", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": "                while self.tok[0]!= ')' and self.tok[0]!= ';':\n                    params.append(self.Parse_expression())\n                    self.NextToken()\n                self.NextToken()\n                if self.tok[0] == '(':\n                    self", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": "    return json_d\n\nThe code above is a class that inherits from LoncapaProblem, which is a subclass of ProblemResponse. LoncapaProblem is a subclass of ProblemResponse, which is a subclass of Response. LoncapaProblem inherits from ProblemResponse to provide additional functionality for handling student", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": "            sqlite3VdbeMemSetStr( pMem, z, -1, SQLITE_UTF8, null );\n        }\n      }\n      sqlite3VdbeMemSetStr( pMem, pOp.z, -1, pOp.zErrMsg, -", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "    if 'orcid' in form:\n        orcid = form['orcid']\n        orcid = orcid.replace('+', '')\n        orcid = orcid.replace('-', '')\n        orcid = orcid.replace(' ', '')\n        orcid", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "            if 'type' in expected_disk_spec and 'thin' in expected_disk_spec['type']:\n                diskspec.device.backing.type = 'thin'\n            else:\n                diskspec.device.backing.type = 'thin'\n            dis", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": "            if (ot == OpType.Implicit)\n                return \"Implicit\";\n            if (ot == OpType.Explicit)\n                return \"Explicit\";\n            if (ot == OpType.True)\n                return \"True\";\n            if (ot == OpType.False", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": "                this.Tree.ClearCachedInfo();\n                this.Tree.ClearCachedInfo();\n                this.Tree.ClearCachedInfo();\n                this.Tree.ClearCachedInfo();\n                this.Tree.ClearCachedInfo();\n                this.Tree.ClearCachedInfo", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": "    journal_id = self.pool.get('account.journal')._get_journal_id(cr, uid, acc_valuation, context)\n    if not journal_id:\n        raise osv.except_osv(_('Error!'), _('Can not create Journal Entry,", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "    out : array_like of datetime64[D], optional\n        A copy of the input array with the invalid dates removed.\n    See Also\n    --------\n    busdaycalendar : object\n        An object with the array of valid days and the weekmask and holidays\n        information.\n    bus", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "            subsets = [slice(None, None)]\n            for index in non_zero_step_indices:\n                subsets.append(slice(index, index + 1))\n            return subsets\n            else:\n                return None\n            else:\n                raise ValueError('coordinates are", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "\tif (region!= null) {\n\t}\n}\n", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "    autoclaim_data['successful_recids'] = autoclaim_successful_recs\n    autoclaim_data['unsuccessful_recids'] = autoclaim_unsuccessful_recs\n    autoclaim_data['login_info'] = login_", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": "    user.email_settings.update(\n        {\n            \"course_key\": course_key,\n            \"receive_emails\": True,\n        },\n        using=settings.AUTH_USER_MODEL,\n    )\n    )\n    user.save()\n    return", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "    for memberType in arrayObjectMemberTypes:\n        if memberType.isArray():\n            arrayObjectMemberTypes.append(memberType)\n        else:\n            interfaceObject = CGList(CGGeneric(memberType))\n            interfaceObject.typeName = memberType.inner.", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": "            tokenlist[ikey] = dictvalue\n            del dictvalue[0]\n            del dictvalue[1]\n            del dictvalue[2]\n            del dictvalue[3]\n            del dictvalue[4]\n            del dictvalue[5]\n            del dictvalue[", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "  if not Match(r'^\\s*[a-zA-Z_]\\s*$', remainder):\n    return False\n  return True\n", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "    # Now we have the index and the new base.  Get the new content.\n    new_content = RunShell([\"git\", \"cat-file\", \"tree\", \"--mode=oct\",\n                            after],\n                           universal_newlines=True, silent_ok=True)", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "            url = _get_subfield_value(fft, 'u', 'URL') #Default is None\n            if url:\n                if url.startswith('http'):\n                    url = url[7:]\n                else:\n                    url = None\n            else:\n                url", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": "    return ifds;\n}", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": "            c = new complex[0];\n            for(i=0; i<=n-1;i++)\n            {\n                c[i] = b[i];\n            }\n            if( m+n-1>=n )\n            {\n                c[n-1]", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": "Yes, I can provide the next line of code.", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": "        if (bImg == null) {\n            return;\n        }\n        if (op == null) {\n            op = null;\n        }\n        if (op instanceof AlphaComposite) {\n            AlphaComposite ac = (AlphaComposite)op;\n            if (ac", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": "      return root.getPackageFragment(CharOperation.toStrings(fileName));\n    }\n  }\n}", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": "            if adding:\n                if lhs in self.pathstack:\n                    self.pathstack.append(lhs)\n                elif rhs in self.pathstack:\n                    self.pathstack.append(rhs)\n                else:\n                    self.pathstack.append(lhs", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": "            if token_type == tokenize.INDENT:\n                logical.append(text)\n            elif token_type == tokenize.DEDENT:\n                logical.append(text)\n            elif token_type == tokenize.NL:\n                logical.append(text", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "    with open(filename, \"r\") as f:\n        for line in f:\n            line = line.strip()\n            if re_warning.match(line):\n                self.logger.warning(line)\n\nThis code is used to read a file and log any lines that contain", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": "                if (mediaEncoderItems.Length!= 3)\n                {\n                    throw new ArgumentOutOfRangeException(String.Format(CultureInfo.CurrentCulture, \"The string '{0}' does not match the expected format. Expected: '||-i {SourceFilePath} {DestinationFilePath}'.", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "        for k in self.splitKeySet.intersection(tree2.splitKeySet):\n            #print 'z %s' % self.splitKeyHash[k].br.len\n            theSum += self.splitKeyHash[k].br.len\n            theSum += tree2", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "    def __getitem__(self, key):\n        return self.rolling_window(key, aggregator=self.aggregator,\n                                   window=self.window,\n                                   unique=True)\n\nThe code above is a bit long, but it's a good example of how to", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": "    return fn(event_key, arg, kw)\n", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": "                int margin = a.getDimensionPixelSize(R.styleable.ViewGroup_MarginLayout_margin, UNDEFINED);\n                setMargins(margin, margin, margin, margin);\n            } finally {\n                a.recycle();\n            }\n        }\n        ", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": "        return _uuid;\n    }\n    /*\n     * (non-Javadoc)\n     *\n     * @see com.ibm.wsspi.sib.core.SICoreConnection#getConnectionProperties()\n     */\n    @Override\n    public Map<", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "                returnType = returnType.TypeKind.IsNullableType()? TypeKind.Object : returnType.TypeKind;\n            }\n            return new IntrinsicOperatorSymbol(op, leftType, rightType, returnType, isChecked);\n        }\n        private static bool IsInTypeOf", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": "    if locals is None:\n        locals = {}\n    self.invoke('beforeEvaluate', locals=locals)\n    try:\n        result = self.evaluate(expression, locals)\n    except ParseError, e:\n        self.invoke('atParse', 'atParse', locals", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": "      for (int j = 0; j < dsize; j++) {\n        data[dataIndex][j] = new int[dsize];\n        for (int k = 0; k < dsize; k++) {\n          data[dataIndex][j][k] = document[j", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": "    };\n    // subfield record for virtual function table pointer with offset\n    /// <summary>\n    /// </summary>\n    internal struct LeafVFuncOff\n    {\n        // internal ushort leaf;      // LF_VFENTRY [TYPTYPE]\n        /// <summary>", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": "            int contextProfile = 0;\n            if (extensions!= null)\n            {\n                int contextProfileIndex = extensions.IndexOf('_');\n                if (contextProfileIndex!= -1)\n                {\n                    contextProfile = (int)extensions.Substring(contextProfileIndex + 1", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": "def acc_authorize_action(user_info, action, auth_value):\n    \"\"\"\n    Authorize the user to perform the given action.\n    @type action: string\n    @param action: the action to authorize the user for.\n    @type user_info: dict\n", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": "self.impl_use = UDFTerminatingDescriptor(impl_use)\nNext line of code:\nself.impl_use.parse(data, self.num_files, self.num_dirs)\nNext line of code:\nself.impl_use.new()\nNext", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "            result = concat(values, keys=key_index, axis=1)\n            return result\n        except Exception:\n            pass\n        return DataFrame(values, index=key_index, columns=keys)\n    def _concat_objects(self, keys, values, not_", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "            case'm':\n                flags |= CASE_INSENSITIVE;\n                break;\n            case's':\n                flags |= DOTALL;\n                break;\n            case 'u':\n                flags |= UNICODE_CASE;\n                break;\n            case 'c':\n", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": "        final StoragePool hostPool = _storageDao.findByPoolId(destHostId, hostId);\n        if (hostPool== null) {\n            throw new ResourceUnavailableException(\"Storage pool \" + destHostId + \" not found\");\n        }\n        final StoragePoolHost", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "    if self.verbose:\n        print(\"Determining gradient for state %d\" % self.states_with_samples[i])\n        self.f_k[self.states_with_samples[i]] = self.f_k[self.states_with_samples[i]]", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": "    d = self.shell.stat(('ned',))\n    def cb(self, res):\n        self.assertEqual(res[0], len(res[1]))\n        self.assertEqual(res[1], 'directory')\n    return d\n    def test_statFile(self", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "                if( b < 0 ) {\n                    break; // Out of for loop\n                }   // end if: end of stream\n                \n                dest[ off + i ] = (byte)b;\n            }   // end for: each byte read\n            \n            return i;\n        ", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": "            if (b == null)  return a;\n            return new ToolkitEventMulticaster(a, b);\n        }\n    }\n}", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": "                                if ( results.Count == 0 )\n                                    notice = \"Nothing found matching the search criteria.\";\n                                else\n                                    notice = \"There are \" + results.Count + \" matches found.\";\n                                break;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrom.SendGump( new AdminG", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": "            if (result == RESULT.OK)\n            {\n                result = FMOD_System_CreateSound(systemraw, name_or_data, mode, ref exinfo, ref soundraw);\n            }\n            return result;\n        }\n        public RESULT createSoundStream        ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": "            tbl_ix = data[base] & 255;\n            base++;\n            if (is_ac)\n                base++;\n            else\nNext line of code:\n            base++;\n            int ac_value = data[base] & 255;\n            int ac_size = 1+", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": "                    this.AddButton(x2, 215, 0xFAB, 0xFAD, 405, GumpButtonType.Reply, 0);\n                    // add the deathball button\n                    this.AddButton(x3, 215, 0xFAB, 0xFAD, 406, GumpButtonType", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "            RequiredColumns = new StringCollection();\n            RequiredColumns.Add(PPersonTable.GetPartnerKeyColumnName());\n            RequiredColumns.Add(PPersonTable.GetFamilyMemberKeyColumnName());\n            RequiredColumns.Add(PPersonTable.GetFamilyMemberKeyColumnName());\n            ", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": "\tif (gfp.in_samplerate!= 0) {\n\t\t\tgfp.in_samplerate = 0;\n\t\t}\nNext line of code:\n\tif (gfp.out_samplerate!= 0) {\n\t\t\tgfp.out_samplerate =", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "            }\n            return AllSubmissionsOK;\n        }\n    }", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": "            elif name == \"test\":\n                value = test.testname.show()\n            elif name == \"testname\":\n                value = test.testname.show()\n            elif name == \"bug\":\n                value = test.testname.bugs.show()\n            elif name ==", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
